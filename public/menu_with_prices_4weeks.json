"use client";

import { useEffect, useState } from "react";

// ---- CONFIG ----
// Force a specific week while you set things up. Set to null to auto-rotate.
// Since you said ‚Äúwe are in week 3 Wednesday today‚Äù, I‚Äôm forcing 3 for now.
const WEEK_OVERRIDE = 3; // 1..4 or null

// Meal windows (IST)
const LUNCH_WINDOW = { startMin: 11 * 60 + 45, endMin: 14 * 60 + 15 }; // 11:45‚Äì14:15
const DINNER_WINDOW = { startMin: 19 * 60, endMin: 21 * 60 + 30 };     // 19:00‚Äì21:30

export default function Home() {
  const [menu, setMenu] = useState(null);
  const [prices, setPrices] = useState(null);
  const [currentMeal, setCurrentMeal] = useState(null);
  const [todayDate, setTodayDate] = useState("");
  const [error, setError] = useState("");

  useEffect(() => {
    async function fetchMenu() {
      setError("");

      // Try the 4-week file first; if missing, fall back to the 2-week file
      const sources = [
        "/menu_with_prices_4weeks_full.json", // new file (week1..week4 + prices + extras)
        "/fortnightly_menu.json"              // old file (weekA/weekB)
      ];

      let data = null;
      for (const url of sources) {
        try {
          const res = await fetch(url, { cache: "no-store" });
          if (res.ok) {
            data = await res.json();
            break;
          }
        } catch (_) { /* try next */ }
      }
      if (!data) { setError("Couldn‚Äôt load menu data."); return; }

      // Determine which shape we have
      const hasFourWeeks =
        typeof data === "object" &&
        (data.week1 || data.week2 || data.week3 || data.week4);

      const hasTwoWeeks =
        typeof data === "object" &&
        (data.weekA || data.weekB);

      // Pick date info
      const today = new Date();
      setTodayDate(
        today.toLocaleDateString("en-IN", {
          weekday: "long",
          year: "numeric",
          month: "long",
          day: "numeric",
        })
      );
      const days = ["sunday","monday","tuesday","wednesday","thursday","friday","saturday"];
      const day = days[today.getDay()];

      // Determine week
      let menuForToday;
      if (hasFourWeeks) {
        // Prefer 4-week data when available
        if (WEEK_OVERRIDE) {
          menuForToday = data[`week${WEEK_OVERRIDE}`]?.[day];
        } else {
          const startDate = new Date(Date.UTC(2025, 0, 1)); // anchor at 2025-01-01 UTC to avoid TZ drift
          const weekNumber = Math.floor((today - startDate) / (7 * 24 * 60 * 60 * 1000));
          const weekIndex = (weekNumber % 4) + 1; // 1..4
          menuForToday = data[`week${weekIndex}`]?.[day];
        }
        // Prices/extras live under data.prices in the 4-week file
        setPrices(data.prices ?? null);
      } else if (hasTwoWeeks) {
        // Fall back to the old 2-week structure
        let weekKey;
        if (WEEK_OVERRIDE) {
          // Map week 1/3 -> weekA, 2/4 -> weekB as a best-effort fallback
          weekKey = (WEEK_OVERRIDE % 2 === 1) ? "weekA" : "weekB";
        } else {
          const startDate = new Date(Date.UTC(2025, 0, 1));
          const weekNumber = Math.floor((today - startDate) / (7 * 24 * 60 * 60 * 1000));
          weekKey = (weekNumber % 2 === 0) ? "weekA" : "weekB";
        }
        menuForToday = data[weekKey]?.[day];

        // No prices/extras in the old file
        setPrices({
          veg: 120,
          nonveg: 135,
          extras: {
            "Butter Milk": 10,
            "Fruit Juice": 50,
            "Lassi": 35,
            "Boiled Eggs": 10,
          },
        });
      } else {
        setError("Menu format not recognized.");
        return;
      }

      // Sunday / missing
      if (!menuForToday) {
        setMenu("Holiday");
      } else {
        setMenu(menuForToday);
      }

      // Detect current meal (IST)
      const nowUTC = new Date();
      const nowIST = new Date(nowUTC.getTime() + 5.5 * 60 * 60 * 1000);
      const total = nowIST.getUTCHours() * 60 + nowIST.getUTCMinutes();
      if (total >= LUNCH_WINDOW.startMin && total <= LUNCH_WINDOW.endMin) {
        setCurrentMeal("lunch");
      } else if (total >= DINNER_WINDOW.startMin && total <= DINNER_WINDOW.endMin) {
        setCurrentMeal("dinner");
      } else {
        setCurrentMeal(null);
      }
    }

    fetchMenu();
  }, []);

  if (error) {
    return (
      <main className="flex min-h-screen items-center justify-center bg-gray-950 text-white">
        <div className="bg-red-900/40 p-6 rounded-lg shadow text-center">
          <h1 className="text-2xl font-bold mb-2">Sindhi Mess Menu</h1>
          <p>{error}</p>
        </div>
      </main>
    );
  }

  if (!menu) {
    return (
      <main className="flex min-h-screen items-center justify-center bg-gray-950 text-white">
        Loading...
      </main>
    );
  }

  if (menu === "Holiday") {
    return (
      <main className="flex min-h-screen items-center justify-center bg-gray-950 text-white">
        <div className="bg-red-900/40 p-6 rounded-lg shadow text-center">
          <h1 className="text-3xl font-bold mb-2">Sindhi Mess Menu</h1>
          <p className="text-lg">Mess Closed (Sunday)</p>
        </div>
      </main>
    );
  }

  return (
    <main className="min-h-screen bg-gray-950 text-white font-sans">
      {/* Header */}
      <header className="w-full py-6 text-center border-b border-gray-800">
        <h1 className="text-3xl font-extrabold tracking-tight bg-gradient-to-r from-pink-500 via-purple-500 to-indigo-500 bg-clip-text text-transparent">
          Sindhi Mess Menu
        </h1>
        <p className="text-sm text-gray-400 mt-1">{todayDate}</p>
      </header>

      {/* Meals */}
      <div className="max-w-2xl mx-auto p-6 space-y-6">
        {Object.entries(menu).map(([meal, items]) => (
          <div
            key={meal}
            className={`relative rounded-2xl p-1 transition-transform hover:scale-[1.01] 
              ${meal === currentMeal ? "bg-gradient-to-r from-green-400 via-emerald-500 to-green-600" : "bg-gradient-to-r from-pink-500 via-purple-500 to-indigo-500"}`}
          >
            <div className="rounded-xl p-6 bg-gray-900">
              <h2 className="text-xl font-semibold capitalize mb-4 flex justify-between items-center">
                <span>üçΩÔ∏è {meal}</span>
                {meal === "lunch" && <span className="text-xs text-gray-400">11:45 ‚Äì 14:15 IST</span>}
                {meal === "dinner" && <span className="text-xs text-gray-400">19:00 ‚Äì 21:30 IST</span>}
              </h2>

              {items.veg?.length > 0 && (
                <div className="mb-4">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-green-400 font-semibold">Veg</span>
                    {prices?.veg != null && <span className="text-xs text-gray-400">‚Çπ{prices.veg}</span>}
                  </div>
                  <ul className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                    {items.veg.map((dish, idx) => (
                      <li key={idx} className="bg-gray-800 px-3 py-2 rounded-lg shadow-sm">{dish}</li>
                    ))}
                  </ul>
                </div>
              )}

              {items.nonveg?.length > 0 && (
                <div>
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-red-400 font-semibold">Non-Veg</span>
                    {prices?.nonveg != null && <span className="text-xs text-gray-400">‚Çπ{prices.nonveg}</span>}
                  </div>
                  <ul className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                    {items.nonveg.map((dish, idx) => (
                      <li key={idx} className="bg-gray-800 px-3 py-2 rounded-lg shadow-sm">{dish}</li>
                    ))}
                  </ul>
                </div>
              )}

              {/* Extras shown after each meal */}
              {prices?.extras && (
                <div className="mt-4">
                  <span className="text-yellow-400 font-semibold mb-2 block">‚ú® Extras</span>
                  <ul className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                    {Object.entries(prices.extras).map(([extra, price]) => (
                      <li key={extra} className="bg-gray-800 px-3 py-2 rounded-lg shadow-sm flex justify-between">
                        <span>{extra}</span>
                        <span className="text-gray-400">‚Çπ{price}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>

      {/* Footer */}
      <footer className="text-gray-600 text-xs text-center py-6">
        Sindhi Mess ¬∑ Designed with ‚ù§Ô∏è
      </footer>
    </main>
  );
}
